[{"categories":null,"contents":"Used Spring Boot to create a simple shopping cart system, which includes:Account securityEntities, DAOs, and models for CRUD operations in MySQLBeans for Dependency Injection and Inverse of ControlForm validatorsThymeleaf","permalink":"https://Hong-Jie.github.io/projects/side_projects/shopping-cart/","tags":["Backend","Spring MVC","Spring Boot","Dependency Injection","Inverse of Control","CRUD","Java","MySQL","HTML"],"title":"Shopping Cart System"},{"categories":null,"contents":"Simulated a CPU cache and its LRU mechanism.The LRU mechanism organizes cache blocks in the order of the time they were used and discards the least recently used block contents when all the blocks are used.","permalink":"https://Hong-Jie.github.io/projects/side_projects/cache-simulator/","tags":["Embedded Systems","cache","LRU","C++"],"title":"CPU cache simulator"},{"categories":null,"contents":"Implemented Deep Q Learning using python\n","permalink":"https://Hong-Jie.github.io/projects/side_projects/deep-q-leaning/","tags":["Machine Learning","Deep Q Learning","python"],"title":"Deep Q Learning Implementation in Pacman"},{"categories":null,"contents":"Proposed a fairness criteria to determined fair coexistence between LTE and WiFi in unlicensed band. According to the criteria, designed an extended LTE-U protocol mainly based on MAC layer. Proved high performance of the design.\n","permalink":"https://Hong-Jie.github.io/publications/thesis/","tags":["Wireless","LTE","WiFi","Protocol design","MAC layer","unlicensed band"],"title":"Design of extended LTE protocol for fair coexistence between LTE-U and WiFi"},{"categories":null,"contents":"Project owner in charge of developing bootloader, BIOS, Firmware of the new product, including:Developed preliminary Power over Ethernet (PoE+) function to increase power supply limit from 30W to 60WBrought up hardware board by configuring and synchronizing GPIO, I2C, SPI, SMI buses and multiplexersImplemented bootloading process including register configuration, multithread BIOS test, and interruption handlingLed conference meetings to address SDK and register issues with Broadcom EngineersMaintained the switch’s setup and configured webpages in Javascript\n","permalink":"https://Hong-Jie.github.io/projects/work/edsp506e/","tags":["bootloader","kernel","BIOS","firmware","parapherals","chip registers","multithreading","interruption handling","C","Javascript"],"title":"Industrial network switches (EDS-P506E)"},{"categories":null,"contents":"Project owner in developing the protocol, including: Designed and Implemented the protocol in an embedded Linux system with 100,000+ lines of C codeImplemented mutex lock, parent and child processes for critical resources securityAdjusted system task priorities in order to improve the network recovery time by 3 times fasterProgrammed 1,000 lines of Makefiles to deploy Debian packages with compatibilityImplemented CRUD operations in JSON format for protocol configurations and verified by Postman","permalink":"https://Hong-Jie.github.io/projects/work/dualhoming/","tags":["Mutex lock","Parent-Child process","System task priorities","Debain package deployment","CRUD","Postman","C","JSON"],"title":"MOXA Proprietary network protocol (Dual Homing)"},{"categories":null,"contents":"Was a member of a group of 7 software engineers to develop a new model of network switches. My job included: Refactored function interfaces between new Broadcom SDK and the application layer with 100,000+ lines of codeImplemented multithreading BIOS test and shorten test time by 50%Debugged system kernel and device drivers to boot the switch","permalink":"https://Hong-Jie.github.io/projects/work/edsg4000/","tags":["Porting","Refactoring","Broadcom SDK","Multithreading","kernel","device drivers","C"],"title":"A new model of switch"},{"categories":null,"contents":"Intro Doesn\u0026rsquo;t matter whether it\u0026rsquo;s a CakePHP app for a client, your own personal CMS, or any other web based application. If your passing around passwords or other sensitive info you should really implement SSL. SSL provides 2 main perks to your visitors.\n First it encrypts all communication that flies across the web. This prevents curious or devious billies from getting your secrets. Secondly it ensures to the user that your server is in fact who it claims, and not a nasty \u0026lsquo;man in the middle\u0026rdquo; attack. Finally it gives your site that touch of class\u0026hellip;. which of course a classy person like yourself relies on.  Once you implement SSL certificates on your server you\u0026rsquo;ll want to require secure connections using Apache\u0026rsquo;s rewrite module. Now I won\u0026rsquo;t dwell on the creation and signing of certificates, its already well documented. If your just starting out though,heres a few links I recommend;\n Creating self-signed certificates (free, but should only be used internally or for testing, users will; see an \u0026lsquo;Untrusted\u0026rdquo; warning) Requesting a CA Signed certificate (not free, but the final certificate is trusted and seamless for users)  The second link uses the schools internal CA, you will need to pay a public CA like Entrust or Verisign. All of this information is aimed at \u0026lsquo;nix or solaris servers running apache. Why? cause a production windows server is laughable :-p\nNow that you have a certificate, whats next? So there you are you have a shiny new Certificate and Server key, how do you force visitors to your apache driven site to use the SSL? You copied the certificates into the appropite locations right? And you have made the needed changes in httpd.conf right? So now when you view https://example.com you see a \u0026lsquo;trusted\u0026rsquo; warning or your site right? If No to any of these than this article does a pretty good job of outlining those steps.\nThe SSL Works, How do I force connections to use it? First you need to decide if you want to force every page on your site to use SSL, or only a particular sub-domain, or maybe just your admin directory. Since the overhead is minimal there is no harm is forcing the entire domain to leverage SSL, but if it is a self-signed certificate for your personal use than you\u0026rsquo;ll most certainly want to restrict its use to your own areas. This prevents users from seeing that nasty warning \u0026ldquo;This server is not trusted\u0026rdquo; You\u0026rsquo;ll know if your using SSL because the url prefix changes from http to https (s for secure).\nForcing entire domain to use SSL You want any visit, any where to use ssl. This probably the simplest solution. Create or append to your htaccess file in the top directory of your server. Some people use a port check (80 is typically http, while 443 is https) but if you have alernate configs or the user just adds :8080 to the end of the url this method is useless. Instead check whether the https environmental variable is set, if not then redirect.\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://%{SERVER_NAME}$1 \\[R,L\\] Forcing sub-domains to use SSL Maybe you only want mysecretarea.example.com to use SSL, that\u0026rsquo;s easy enough. Its the same premise as above, but you move the htaccess file into the directory that corresponds to the subdomain. Also change the second line like below;\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://mysecretarea.%{SERVER_NAME}$1 \\[R,L\\] Forcing a directory to use SSL This method cn get a little hairier if your using aliases or redirects on top of this one. You\u0026rsquo;ll need to consider what order the commands are read. The basic principle is like so. You want all visits to example.com/admin to use ssl. Create a htaccess file in the parent directory. Again will check for the https variable, but this time we also check for the sub-directory to be in the path.\nRewriteCond %{HTTPS} !=on RewriteRule ^/admin/(.*)$ https://%{SERVER_NAME}/admin/$1 \\[R,L\\] ","permalink":"https://Hong-Jie.github.io/blog/force-ssl/","tags":["apache","apache","redirect","rewrite","ssl","web development"],"title":"Forcing Visits to use SSL"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026#34;contents\u0026#34;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026#34;tags\u0026#34;:{{ .Params.tags | jsonify }}{{end}}, \u0026#34;categories\u0026#34; : {{ .Params.categories | jsonify }}, ... Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026#34;title\u0026#34;, \u0026#34;contents\u0026#34;, \u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34; ] ","permalink":"https://Hong-Jie.github.io/search/","tags":null,"title":"Search Results"}]